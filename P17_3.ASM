; 编写一个接收字符串输入的子程序，实现上面3个基本功能。因为在输入的过程中需要显示，子程序的参数如下：
; (dh)/(dl) =  字符串显示的行列号
; ds:si 指向字符串的存储空间，字符串以0位结尾符

; 子程序：字符栈的入栈、出栈和显示
; 参数说明：	(ah)=功能号，0表示入栈，1表示出栈，2表示显示；
;		ds:si指向字符栈空间
;		对于0号功能，(al) = 入栈字符
;		对于1号功能，(al) = 出栈字符
;		对于2号功能，(dh)/(dl) =  字符串显示的行列号

ASSUME CS:CODE, DS:DATA, SS:STACK

DATA SEGMENT
	C_STACK	DB 128 DUP (0)
DATA ENDS

STACK SEGMENT
	DB 128 DUP (0)
STACK ENDS

CODE SEGMENT
	START:
	MOV AX, DATA
	MOV DS, AX
	MOV AX, STACK
	MOV SS, AX
	MOV SP, 0080H
	MOV SI, OFFSET C_STACK
	; 测试 入栈
	MOV AH, 00H
	MOV AL, 61H
	CALL CHAR_STACK
	; 测试 出栈
	MOV AH, 01H
	CALL CHAR_STACK
	; 测试 显示
	MOV AH, 02H
	MOV DX, 0C04H
	CALL CHAR_STACK
	;
	CALL GET_STR

	MOV AX, 4C00H
	INT 21H

	GET_STR:
	PUSH AX

	GET_STR_S:
	MOV AH, 00H
	INT 16H
	CMP AL, 20H
	JB NOCHAR
	MOV AH, 00H
	CALL CHAR_STACK
	MOV AH, 02H
	MOV DX, 0C04H
	CALL CHAR_STACK
	JMP SHORT  GET_STR_S

	NOCHAR:
	CMP AH, 0EH; BACKSPACE SCAN CODE
	JZ BACKSPACE
	CMP AH, 1CH; ENTER SCAN CODE
	JZ ENTER
	JMP SHORT GET_STR_S
	
	BACKSPACE:
	MOV AH, 01H
	CALL CHAR_STACK
	MOV AH, 02H
	CALL CHAR_STACK
	JMP SHORT GET_STR_S

	ENTER:
	MOV AH, 00H
	MOV AL, 00H
	CALL CHAR_STACK
	MOV AH, 02H
	MOV DX, 0C04H
	CALL CHAR_STACK

	POP AX
	RET
	

	CHAR_STACK:
	JMP SHORT CHAR_STACK_START
	FUNCTION_ADDRESS	DW PUSHCHAR, POPCHAR, SHOW_STR
	TOP			DW 0FFFFH 

	CHAR_STACK_START:
	PUSH BX
	CMP AH, 02H
	JA CHAR_STACK_RET
	MOV BL, AH
	MOV BH, 00H
	ADD BX, BX
	CALL FUNCTION_ADDRESS[BX]
	
	CHAR_STACK_RET:
	POP BX
	RET

	PUSHCHAR:
	PUSH BX
	INC TOP
	MOV BX, TOP
	MOV [SI][Bx], AL
	POP BX
	RET

	POPCHAR:
	PUSH BX
	MOV BX, TOP
	MOV AL, [SI][BX]
	DEC TOP
	POP BX
	RET
	
	SHOW_STR:
	PUSH AX
	PUSH SI
	PUSH DI
	PUSH ES 

	MOV AL, 0A0H
	MUL DH
	MOV DI, AX
	MOV AL, 02H
	MUL DL
	ADD DI, AX

	MOV AX, 0B800H
	MOV ES, AX	
	
	MOV AX, 0000H
	CMP AX, TOP
	JNZ SHOW_STR_S 
	MOV BYTE PTR ES:[DI], ' '
	MOV BYTE PTR ES:[DI].01H, 43H
	JMP SHORT SHOW_STR_ZERO
	 

	SHOW_STR_S:
	MOV AL, [SI]
	CMP AL, 00H
	JZ SHOW_STR_ZERO
	MOV ES:[DI], AL
	MOV BYTE PTR ES:[DI].01H, 43H
	INC SI
	ADD DI, 0002H
	JMP SHORT SHOW_STR_S

	SHOW_STR_ZERO:
	POP ES
	POP DI
	POP SI
	POP AX
	RET	

CODE ENDS
	END START
